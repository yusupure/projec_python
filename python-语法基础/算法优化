n=7
e=n//2

for i in range(-e,n-e):
    if i<0:
        i=-i
    print(' '*i+'*'*(n-i*2)+' '*i)

for i in range(-e,n-e):
    if i < 0:
        i = -i
    print(' '*(e-i)+'*'*(i*2+1)+' '*(e-i))

for i in range(-e,n-e):
    if i < 0:
        print(' '*-i+'*'*(4+i))
    if i==0:
        print('*'*7)
    if i>0:
        print(' '*3+'*'*(4-i)+' '*i)

print('*'*90)

print('交换1')
x=[1,9,8,6,7,5,3,2,4]
lex=len(x)
for i in range(lex):
    for j in range(lex-1):
        if x[j]>x[j+1]:
            x[j], x[j + 1]=x[j + 1],x[j]
print(x)

print('交换2')
for i in range(lex//2):
    maxindex=i
    minindex=-i-1
    morg=minindex
    for j in range(i+1,lex-1):
        if x[maxindex]>x[j]:
            maxindex=j
        if x[minindex]<x[-j-1]:
            minindex=-j-1
    if i==minindex or i==lex+minindex:
        minindex=maxindex
    if i!=maxindex:
        x[i],x[maxindex]=x[maxindex],x[i]
    if morg!=minindex:
        x[morg],x[minindex]=x[minindex],x[morg]
print(x)

print('交换3')
x2=[1,9,8,6,7,5,3,2,4]
x1=[0]+x2
def fa(src):
    for i in range(2,len(src)):
        src[0]=src[i]
        j=i-1
        while src[j]>src[0]:
            #print(src,'xxxxx')
            src[j+1]=src[j]
            #print(src)
            j-=1
        src[j+1]=src[0]
    return src
print(fa(x1))



print('*'*90)
print()

print('变换矩形1')
xd=[[1,2,3],[4,5,6],[7,8,9]]
for i in range(len(xd)):
    for j in range(i):
        xd[i][j],xd[j][i]=xd[j][i],xd[i][j]
print(xd)
print('变换矩形2')
xd=[[1,2,3],[4,5,6]]
xb=[[0 for j in range(2)]for i in range(3)]
for i in range(3):
    for j in range(2):
        xb[i][j]=xd[j][i]
print(xb)
print('变换矩形3')

xx=[]
for i in xd:
    for j in range(len(xd)+1):
        if len(xx)<j+1:
            xx.append([])
        xx[j].append(i[j])
print(xx)

print('变换矩形3')
xd1=[[1,2,3],[4,5,6]]
xx1=[]
for i in range(len(xd1[0])):
    row=[]
    for j in range(len(xd1)):
        row.append(xd1[j][i])
    xx1.append(row)
print(xx1)

print('*'*90)
print()
print('杨辉三角1')
x=[1]
for i in range(6):
    x=[1]+[x[j]+x[j+1] for j in range(i)]+[1]
    print(x)

print('杨辉三角2')
b=[]
for i in range(6):
    x=[1]*(i+1)
    b.append(x)
    if i==0:
        continue
    for j in range(1,i//2+1):
        val=b[i-1][j]+b[i-1][j-1]
        x[j]=val
        if j!=j-i:
            x[-j]=val
print(b)


print('*'*90)
print()
print('99乘法表')

for i in range(1,10):
    print(' '*7*(i-1),end='')
    for j in range(1,10):
        if i*j<10:
            end='  '
        else:
            end=' '
        if i<j+1:
            print('{}*{}={}'.format(i,j,i*j),end=end)
    print()

print('*'*90)
print()
print('相同字符计算')
nums='1233452'
des={}
for i in range(len(nums)):
    if nums[i] not in des:
        des[nums[i]]=1
    else:
        des[nums[i]]+=1
print(des)

print('*'*90)
print()
print('相同字符计算')
import random
from collections import OrderedDict
nums=[random.randint(-1000,1000) for i in range(10)]
print(nums)
bbd={}
for i in range(len(nums)):
    if nums[i] not in bbd:
        bbd[nums[i]]=1
    else:
        bbd[nums[i]]+=1

ppt=OrderedDict()
for zt in bbd:
    ppt[zt]=bbd[zt]
print(ppt)

xt=sorted(bbd.items(),key=lambda bbd:bbd,reverse=True)
print(xt)

desa={}
bt='abcdefghijklmnopqrstuvxyz'
xt=[random.choice(bt)+random.choice(bt) for i in range(10)]
for i in xt:
    if i not in desa:
        desa[i]=1
    else:
        desa[i]+=1
print(desa)


print('*'*90)
print()
print('心形打印')

xxing='\n'.join([''.join([('*' if ((j*0.05)**2+(i*0.1)**2-1)**3-(j*0.05)**2*(i*0.1)**3 <=0 else ' ')  for j in range(-30,30)]) for i in range(12,-12,-1)])
print(xxing)


print('*'*90)
print()
print('梯形打印')
nums=12
for i in range(1,nums+1):
    for j in range(nums,0,-1):
        if i<j:
            print(' '*len(str(j)),end=' ')
        else:
            print(j,end=' ')
    print()

tail=' '.join([str(i) for i in range(nums,0,-1) ])
for i in range(1,nums):
    print('{:>{}}'.format(' '.join([str(j) for j in range(i,0,-1)]),len(tail)))
print(tail)
print('*'*90)
print(tail)
for i in range(len(tail)):
    if tail[i]==' ':
        print(' '*i,tail[i+1:])


print('*'*90)
print()
print('递归阶乘')
n=5
def jc(n):
    if n==1:
        return 1
    return n*jc(n-1)
print(jc(n))

print('猴子吃桃')
n=10
def monkey(n,x):
    if n==1:
        return x
    return monkey(n-1,(x+1)*2)
print(monkey(n,1))

print('费波那奇数列')
pre=0
cur=1
n=10
def fbnk(n,pre,cur):
    pre,cur=cur,pre+cur
    if n==1:
        return cur
    return fbnk(n-1,pre,cur)

print(fbnk(n,pre,cur))

print('字符串转换')
x=[]
abc='1234'
def ads(n):

    if n<0:
        return ' '
    x.append(abc[n])
    return abc[n]+ads(n-1)
print(ads(len(abc)-1))

print('*'*90)
print()
print('递归遍历扁平化字典输出')
src = {'a': {'b': 1, 'c': 2}, 'd': {'e': 3, 'f': {'g': 4}}}
def pdk(src,keys='',des={}):
    for k,v in src.items():
        if isinstance(v,dict):
            pdk(v,keys+k+'.')
        else:
            des[keys+k]=v
    return des
print(pdk(src))

print('base64')
import string
ac=string.ascii_letters+string.digits+'+'+'/'
ac=str.encode(ac)
def base64(src):
    r=0
    res=bytearray()
    for offset in range(0,len(src),3):
        if offset+3<len(src):
            tp=src[offset:offset+3]
        else:
            tp=src[offset:]
            r=3-len(tp)
            tp=tp+'/x00'*r
        b=int.from_bytes(tp.encode(),'big')
        for i in range(18,-1,-6):
            index=b>>i & 0x3F
            res.append(ac[index])
        for j in range(1,r+1):
            res[-j]=0x3D
    return bytes(res)

print(base64('abcd'))


print('公共字符串1')
str1='abcdefg'
str2='efgabcd'
lenstr1=len(str1)
lenstr2=len(str2)
maxindex=0
p=0
xbs=[[0 for j in range(lenstr1+2)]for i in range(lenstr2+2)]
for i in range(lenstr1):
    for j in range(lenstr2):
        if str1[i]==str2[j]:
            xbs[i+1][j+1]=xbs[i][j]+1
        if xbs[i+1][j+1]>maxindex:
            maxindex=xbs[i+1][j+1]
            p+=1

print(str1[p-maxindex:p])

print('公共字符串2')
def bbk(str1,str2):
    for i in range(lenstr1,0,-1):
        for j in range(0,lenstr2-i+1):
            res1=str1[j:i+j]
            #print(res1)
            if str2.find(res1)>-1:
                 return res1
print(bbk(str1,str2))

print('公共字符串3')
def bbd(str1,str2):
    b=[]
    maxindex=0
    indexx=0
    for i,x in enumerate(str1):
        b.append([])
        for j,y in enumerate(str2):
            if x!=y:
                b[i].append(0)
            else:
                if i==0 or j==0:
                    b[i].append(1)
                else:
                    b[i].append(b[i-1][j-1]+1)
                    if b[i][j]>maxindex:
                        maxindex=b[i][j]
                        indexx=j
                        indexx+=1
    print(str2[indexx-maxindex:indexx])


bbd(str1,str2)


print('*'*90)
print()
print('堆排序')

def print_tree(origin):
    lcx=2**h-1
    for i in range(1,lcx+1):
        times=2**(i-1)
        for j in range(times-1,times*2-1):
            if i<j:break
            print('{:^{}}'.format(origin[1:][j],lcx*2),end=' '*2)
        print()
        lcx//=2

def print_tree2(origin):
    lcx = 2 ** h - 1
    index=1
    for i in range(h):
        for j in range(2**i):
            print('{:^{}}'.format(origin[index],lcx*2),end=' '*2)
            index += 1
            if index < j: break
        print()
        lcx//=2

origin = [0,30, 20, 80, 40, 50, 10, 60, 70, 90]
lenght=len(origin)-1
h=lenght//2

def heap_sort(origin,lenght,i):
    while 2*i<lenght:
        lc=2*i
        maxd=lc
        if lc<lenght and origin[maxd+1]>origin[lc]:
            maxd=lc+1
        if origin[maxd]>origin[i]:
            origin[maxd] ,origin[i]=origin[i],origin[maxd]
            i=maxd
        else:
            break
    return origin


def heap_set(origin,lenght):
    for i in range(lenght//2,0,-1):
        heap_sort(origin,lenght,i)
    return origin


print_tree2(heap_set(origin,lenght))


print('*'*90)
print()
print('自检缓冲区')
#自检缓冲区
import inspect
import datetime
from functools import wraps
import time
def m_cathe(fn):
    local_dict={}
    @wraps(fn)
    def wrapper(*args,**kwargs):
        print(args,kwargs)
        res=fn(*args,**kwargs)
        sig=inspect.signature(fn)
        parmer=sig.parameters
        parmer_list=list(parmer.keys())
        key_dict={}
        #缺省值
        for i,v in enumerate(args):
            k=parmer_list[i]
            key_dict[k]=v
        #位置参数
        key_dict.update(kwargs)
        #处理缺省值
        for k in parmer.keys():
            if k in key_dict.keys():
                key_dict[k]=parmer[k].default
        #固定排序
        key=tuple(sorted(key_dict.items()))

        if key not in local_dict.keys():
            rest=fn(*args,**kwargs)
            local_dict[key]=rest
        return local_dict[key]
    return wrapper

def logger(fn):
    @wraps(fn)
    def wrapper(*args,**kwargs):
        strat=datetime.datetime.now()
        rest=fn(*args,**kwargs)
        time.sleep(3)
        lasttime=(datetime.datetime.now()-strat).total_seconds()
        print(lasttime)
        return rest
    return wrapper


@logger
@m_cathe
def add(x:int,y:int)->int:
    ret=x+y
    return ret


print(add(3,4))





