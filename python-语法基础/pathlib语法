from pathlib import Path
#打开文件方式
p=Path('D:/pypj/pj_oadata/test.txt')
with p.open(mode='r') as f:
    #print(f.read())
    f.read_text()


p=Path('D:/pypj/pj_oadata/')
#p=p /'333'
# print(p.cwd())#获取当前路径
# print(p.absolute())#获取当前路径
# print(p.stat())#获取文件内容
# print(p.name)#获取文件信息
# print(p.stem)#获取文件名称
# print(p.suffix)#获取后缀
# print(p.anchor)#获取根目录
# print(p.exists())#判断是否文件夹还是文件返回布尔值
# print(p.is_dir())#是否文件夹
# print(p.is_file())#是否文件
# x=p.iterdir()#文件夹内所有文件生成迭代，需要循环迭代显示
# for i in x:
#     print(i)
#p.mkdir()生成文件夹需引用PATH传入创建的文件名称，MKDIR不接受外部路径传入
#p.rmdir()#删除文件夹与上面情况雷同
print(p.parent)
#print(p.parent)#当前上一级文件夹
# xd=p.parents#把当前文件夹内一级一级往前迭代
# for x in xd:
#     print(x)

p=Path('D:/pypj/pj_oadata/test.txt')
直接打开并提取内容及写入内容
•.read_text: 以文本模式打开路径并并以字符串形式返回内容。
•.read_bytes: 以二进制/字节模式打开路径并以字节串的形式返回内容。
•.write_text: 打开路径并向其写入字符串数据
•.write_bytes: 以二进制/字节模式打开路径并向其写入数据。


from pathlib import Path

p=Path()
#p=p.absolute()

# for x in p.parents[len(p.parents)-1].iterdir():
#     if x.is_dir():
#         flag=False
#         for i in x.iterdir():
#             flag=True
#         print('a',x if flag else 'b',x)
#     elif x.is_file():
#         print('xx',x)
#     else:
#         print('no')




#计算文件后类型数量
#import collections
#x=collections.Counter(d.suffix for d in p.cwd().iterdir())

#文件改名
#p=Path(r'D:\pypj\pj_oadata\test.txt')
#p.replace('cdf')

#查找文件当前返回路径
#p=Path(r'D:\pypj\pj_oadata\test.txt')
#print(p.resolve())

#文件改名
# infile=Path.cwd() / 'edf1'
# outfile=Path.cwd() / 'test.txt'
# outfile.replace(infile)
#更换后缀名称
# source = Path.cwd() / "demo.py"
# source.replace(source.with_suffix(".txt"))
